1.语言表达较清晰                                           70%
2.技术掌握水平                                             70%
	a.mysql索引原理，类别，使用场景                          	70%
	b.jvm组成结构，jvm垃圾回收算法，垃圾回收器，jvm调优        60%
	c.hashMap组成原理,,ConcurrentHashMap,                  	70%
	d.redis和memacache的区别,redis数据类型，redis持久化策略  	65%
	e.springMVC运转流程                                     	90%
3.互联网项目经验                                           60%


1.语言表达,逻辑较为清晰
2.java基础较为扎实（数据结构,jvm原理优化,锁,线程,mysql索引等等底层原理能回答70%）
3.过往项目经验相对简单，对第三方中间件（zk,dubbo,redis,activeMq,netty）架构原理了解少

session,cookies区别，springMvc的请求流程

HashMap的实现原理
TreeMap
LinkedHashMap


数据安全实现方式cas,锁(重入锁)
多线程实现原理
重入锁和内置锁区别 实现原理
threadlocal

aop实现原理
springAOP的实现原理   spring事务在什么场景下失效

NIO




volatile  ThreadLocal

单例

数据库 索引B+树  事务MVCC


redis和memacache分别如何读取数据的，服务down了怎么办
分布式锁实现

cap理论
zk数据一致性是如何保证的

RPC调用过程



消息队列
	1.如何保证消息是有序的
	2.如何保证消息是幂等的
	3.


如何取消一个线程
如何关闭一个有很多线程的服务
如何设计线程池的大小
ThreadPoolExecutor，Future等Java线程框架的使用
线程被中断了如何处理
线程池资源不够了，有什么处理策略
死锁的N种情形
如何取消和关闭线程
如何避免线程的活跃性风险
如何提升性能和可伸缩性
如何测试并发程序
显示锁及其原理
如何自定义同步工具
原子变量及其原理
非阻塞算法及其原理


redis
1、为什么使用redis
2、使用redis有什么缺点
3、单线程的redis为什么这么快
4、redis的数据类型，以及每种数据类型的使用场景
5、redis的过期策略以及内存淘汰机制
6、redis和数据库双写一致性问题
7、如何应对缓存穿透和缓存雪崩问题
8、如何解决redis的并发竞争问题


消息队列
为什么使用消息队列？
答：解耦、异步、削峰
使用消息队列有什么缺点?
答：最终一致性要求，复杂性变多
消息队列如何选型?
答：RabbitMQ,RocketMQ,Kafka
如何保证消息队列是高可用的？
答：
如何保证消息不被重复消费?
答：消费方幂等表，或者redis记数
如何保证消费的可靠性传输?
答:
	a.生产者丢数据--发送前增加消息id，如果没有收到该消息ack消息就重试，直到成功为止
	b.消息队列丢数据--收到生产者消息后直接持久化
	c.消费者丢数据--消费完了再确认

如何保证消息的顺序性？
答：


1.spring中用了哪些设计模式
	简单工厂模式：beanfactory通过一个简单的bean id或者bean name获取相应的bean对象
	工厂方法模式：通过配置文件中指定factory-method方法指定构造方法，创建对象的权利移交给spring容器管理
			单例模式：通过scope指定单例，提供了全局的访问点BeanFactory。但没有从构造器级别去控制单例，这是因为spring管理的是是任意的java对象。 
		适配器模式：AOP，通过动态代理或GCLib生成被代理类的代理类，并在代理类的方法前后追加方法，增强了代理方法的功能，实现的面向切面编程。
		  代理模式：AOP动态代理和GClib，一个是通过jdk动态代理生成代理对象（被代理类必须有接口），如果没有接口只能使用gclib，生成一个代理对象的子类
		观察者模式：ApplicationListener使用的是观察者模式，定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。
			策略模式：SimpleInstantiationStrategy中有使用，定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。
	模板方法模式：例如JdbcTemplate，模板方法模式和回调模式的结合，spring扩展时必用的设计模式，由抽象父类控制顶级逻辑，并把基本操作的实现推迟到子类去实现，这是通过继承的手段来达到对象的复用。

	spring主要通过模版方法实现扩展的
		1.模版方法里暴露抽象方法，让子类去实现
		2.模版方法调用时传入调用钩子方法进行回调
	
2.ioc依赖注入
	IOC总的来说就是spring根据描述文件，标签，和bean的定义提前生成维护一套bean对象，在你用的时候直接取。
	springIOC 核心维护一个hashmap用于存放bean，通过beanfactory规范生成对象获取对象的步骤
	
	依赖注入的过程
	1.容器依赖初始化，加载解析配置文件：通过ResourceLoader加载各种配置文件解析生成BeanDefinition，存放在BeanFactory的beanDefinitionMap中，完成初始化工作
	2.生成对象：通过反射调用默认构造方法或者调用特定的工厂方法生成实例，也可以用gclib创建对象，放入beanfactory的hashmap中
	3.注入对象和属性：通过BeanWrapper对bean的属性进行注入
	
	IOC创建对象的方式
	a.默认调用对象的默认构造方法
	b.利用静态工厂创建，利用配置文件中指定的factory-mehtod属性
	
	IOC创建对象是如何保证单例的
	使用了双重判断加锁的单例模式，首先从缓存中获取bean实例，如果为null，对缓存map加锁，然后再从缓存中获取bean，如果继续为null，就创建一个bean。
	
	IOC创建对象是如何保证线程安全的
	通过threadlocal封装对象，利用空间换取安全的方式，给每个线程独立分配对象，例如（RequestContextHolder、TransactionSynchronizationManager、LocaleContextHolder等）

	IOC创建对象的时机
		lazy-init="default/true/false"
		default/false: 在启动spring容器的时候创建对象；
		true ：在context.getBean时就要创建对象；
	
	IOC依赖注入的时机
		和创建对象的时机一致

3.AOP

	
threadlocal的如何监听线程运行完毕，同步异步
	shutdown（） isterminor();


4.jvm架构图

5.jvm优化方向
	1.代码  避免内存泄漏
	2.jvm空间优化，新生代，年老代，持久代，线程栈空间优化
	3.垃圾回收器优化

6.jvm什么时候会触发full gc
	1.年老代空间不足	 内存泄漏
	2.持久代空间不足   class类,反射多，常量过多
	3.新生代平均晋升对象大小超过年老代空间
	4.cms并发标记失败，可用内存68&以下就会串行GC
	5.system.gc()
	6.启用了RMIjava远程过程调用，每小时一次full gc

7.高并发优化方向
	a.充分利用多线程提高程序运行效率
		1.同步转异步   把耗时但不影响最终结果的任务用异步线程去搞定
		2.线程池   ThreadPoolExcutor
		3.生产者消费者模式MQ
		4.NIO reactor多路复用selector
	b.在高并发环境下保证线程安全
		1.发布一个无状态的对象，永远是安全的   例如final修饰的类
		2.线程封闭隔离，threadlocal隔离线程局部变量
		3.

	
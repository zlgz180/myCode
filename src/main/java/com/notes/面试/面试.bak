1.语言表达较清晰                                           70%
2.技术掌握水平                                             70%
	a.mysql索引原理，类别，使用场景                          60%
	b.jvm组成结构，jvm垃圾回收算法，垃圾回收器，jvm调优      60%
	c.数组和链表区别,hashMap,ConcurrentHashMap,              70%
	d.redis和memacache的区别,redis数据类型，redis持久化策略  65%
	e.springMVC运转流程                                      90%
3.互联网项目经验                                           60%

session,cookies区别，springMvc的请求流程

HashMap的实现原理
TreeMap
LinkedHashMap


数据安全实现方式cas,锁(重入锁)
多线程实现原理
重入锁和内置锁区别 实现原理
threadlocal

aop实现原理
springAOP的实现原理   spring事务在什么场景下失效

NIO




volatile  ThreadLocal

单例

数据库 索引B+树  事务MVCC


redis和memacache分别如何读取数据的，服务down了怎么办
分布式锁实现

cap理论
zk数据一致性是如何保证的

RPC调用过程



消息队列
	1.如何保证消息是有序的
	2.如何保证消息是幂等的
	3.
	
	
如何取消一个线程
如何关闭一个有很多线程的服务
如何设计线程池的大小
ThreadPoolExecutor，Future等Java线程框架的使用
线程被中断了如何处理
线程池资源不够了，有什么处理策略
死锁的N种情形
如何取消和关闭线程
如何避免线程的活跃性风险
如何提升性能和可伸缩性
如何测试并发程序
显示锁及其原理
如何自定义同步工具
原子变量及其原理
非阻塞算法及其原理


redis
1、为什么使用redis
2、使用redis有什么缺点
3、单线程的redis为什么这么快
4、redis的数据类型，以及每种数据类型的使用场景
5、redis的过期策略以及内存淘汰机制
6、redis和数据库双写一致性问题
7、如何应对缓存穿透和缓存雪崩问题
8、如何解决redis的并发竞争问题


消息队列
为什么使用消息队列？
答：解耦、异步、削峰
使用消息队列有什么缺点?
答：最终一致性要求，复杂性变多
消息队列如何选型?
答：RabbitMQ,RocketMQ,Kafka
如何保证消息队列是高可用的？
答：
如何保证消息不被重复消费?
答：消费方幂等表，或者redis记数
如何保证消费的可靠性传输?
答:
	a.生产者丢数据--发送前增加消息id，如果没有收到该消息ack消息就重试，直到成功为止
	b.消息队列丢数据--收到生产者消息后直接持久化
	c.消费者丢数据--消费完了再确认
	
如何保证消息的顺序性？
答：